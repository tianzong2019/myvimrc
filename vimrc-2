filetype plugin on
"set nocompatible            " 配置不兼容vi
"set pastetoggle=<F7>        " 在粘贴代码之前，进入insert模式，按F7,就可以关闭自动缩进

set nobackup                " 覆盖文件时不备份
set noswapfile
set noerrorbells            " 关闭错误信息响铃
set novisualbell            " 关闭使用可视响铃代替呼叫

set laststatus=2                                   "startup the lightline.vim
let g:lightline = { 'colorscheme': 'powerline', }  "set status-line
let g:Powerline_symbols= 'unicode'

set t_Co=256
set cursorline              " 突出显示当前行
set cursorcolumn            " 高亮显示光标列
highlight cursorline cterm=none ctermbg=236    
highlight cursorcolumn cterm=none ctermbg=236

set ignorecase smartcase    " 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感
set incsearch               " 输入搜索内容时就显示搜索结果
set hlsearch                " 搜索时高亮显示被找到的文本
hi Search term=standout ctermfg=0 ctermbg=11 guifg=Black guibg=Yellow

set magic                   " 显示括号配对情况
set number                  " 显示行号
nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>
" 用< F2>开启/关闭行号

syntax on                   " 自动语法高亮
set autoindent              "设置自动缩进：即每行的缩进值与上一行相等
set cindent                 "使用 C/C++ 语言的自动缩进方式

set shiftwidth=4            " 设定 << 和 >> 命令移动时的宽度为 4
set softtabstop=4           " 使得按退格键时可以一次删掉 4 个空格
set tabstop=4               " 设定 tab 长度为 4

" 手动触发放弃当前修改，强制重新载入                
nnoremap <leader>e :e!<CR>



"-------------------------------------------------"
" plug list
"  
"-------------------------------------------------"
" taglist_46
"
" global
"     gtags.vim
"     gtags-cscope.vim
" 
" gutentags-master
"
" LeaderF-1.23
"
" vim-autoformat-master
"
" bufexplorer-7.4.21
"
"
" curl -sL install-node.now.sh | sh
" curl --compressed -o- -L https://yarnpkg.com/install.sh | bash
" checkhealth  安装后检查
"
"插件：
" cscope
"	autoload_cscope.vim
" ctags
"	vim-gutentags
" taglist
" mark.vim
" bufexploer
" quickfix
" insearch
" NerdCommenter
" nerdtree
" lightline
" leaderf
" coc.nvim
"	curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
" 	sudo apt-get install -y nodejs
" 	yarn install
" 	yarn build
" 	执行命令:CocInstall coc-clangd
"		sudo apt install clangd 安装C/C++ Language Server
" 	执行:CocInstall coc-snippets 安装代码片段
"		代码段集合，honza/vim-snippets
"
"
"
"""""""""""""""""""""""""""""""""""""""""""""""""
" 配置代码折叠
"
" zc 关闭折叠
" zo 打开折叠
" za 打开/关闭折叠互相切换
"
set foldenable              " 开始折叠
set foldmethod=syntax       " 设置语法折叠
set foldcolumn=0            " 设置折叠区域的宽度
setlocal foldlevel=1        " 设置折叠层数为
set foldlevelstart=99       " 打开文件是默认不折叠代码
"set foldclose=all          " 设置为自动关闭折叠
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
                            " 用空格键来开关折叠


"""""""""""""""""""""""""""""""""""""""""""""""""
" 窗口移动及resize
"
nnoremap <c-h>    <esc><c-w>h<esc>
nnoremap <c-j>    <esc><c-w>j<esc>
nnoremap <c-k>    <esc><c-w>k<esc>
nnoremap <c-l>    <esc><c-w>l<esc>

nnoremap <M-left>    <esc><c-w>h<esc>
nnoremap <M-down>    <esc><c-w>j<esc>
nnoremap <M-up>    <esc><c-w>k<esc>
nnoremap <M-right>    <esc><c-w>l<esc>

nmap v=    <esc>:resize +3<cr><esc>
nmap v-    <esc>:resize -3<cr><esc>
nmap v,    <esc>:vertical resize +3<cr><esc>
nmap v.    <esc>:vertical resize -3<cr><esc>



"""""""""""""""""""""""""""""""""""""""""""""""""
" 最大化当前窗口及返回
"
function! Zoom ()
    " check if is the zoomed state (tabnumber > 1 && window == 1)
    if tabpagenr('$') > 1 && tabpagewinnr(tabpagenr(), '$') == 1
        let l:cur_winview = winsaveview()
        let l:cur_bufname = bufname('')
        tabclose

        " restore the view
        if l:cur_bufname == bufname('')
            call winrestview(cur_winview)
        endif
    else
        tab split
    endif
endfunction
nnoremap zx <esc>:call Zoom() <cr><esc>



"""""""""""""""""""""""""""""""""""""""""""""""""
" bufexplorer-7.4.21
"
"
"To start exploring in the current window, use: >
" <Leader>be   or   :BufExplorer   or   Your custom key mapping
"To toggle bufexplorer on or off in the current window, use: >
" <Leader>bt   or   :ToggleBufExplorer   or   Your custom key mapping
"To start exploring in a newly split horizontal window, use: >
" <Leader>bs   or   :BufExplorerHorizontalSplit   or   Your custom key mapping
"To start exploring in a newly split vertical window, use: >
" <Leader>bv   or   :BufExplorerVerticalSplit   or   Your custom key mapping
"打开关闭bufexplorer
nnoremap <F9> :ToggleBufExplorer<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""
" nerdcommenter-2.5.2
"
"<leader>ca在可选的注释方式之间切换，比如C/C++ 的块注释/* */和行注释//  
"<leader>cc注释当前行
"<leader>c<space> 切换注释/非注释状态
"<leader>cs 以”性感”的方式注释
"<leader>cA 在当前行尾添加注释符，并进入Insert模式
"<leader>cu 取消注释
"<leader>c$ 从光标开始到行尾注释  ，这个要说说因为c$也是从光标到行尾的快捷键，这个按过逗号（，）要快一点按c$
"2<leader>cc 光标以下count行添加注释 
"2<leader>cu 光标以下count行取消注释
"2<leader>cm:光标以下count行添加块注释(2,cm)
"Normal模式下，几乎所有命令前面都可以指定行数
"Visual模式下执行命令，会对选中的特定区块进行注释/反注释
"
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1



"""""""""""""""""""""""""""""""""""""""""""""""""
" The-NERD-tree-5.0.0
"
" u 打开上层目录
"
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeHidden=0                   " 不显示隐藏文件
map <F3> <esc>:NERDTreeMirror<CR><esc>
map <F3> <esc>:NERDTreeToggle<CR><esc>


"""""""""""""""""""""""""""""""""""""""""""""""""
" UltiSnips 2.2
"
"
if has('python')
        let g:UltiSnipsUsePythonVersion=2
elseif has('python3')
        let g:UltiSnipsUsePythonVersion=3
endif
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-tab>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"










"-------------------------------------------------"
" auto-format
"
"  
"-------------------------------------------------"
au BufWrite *.cpp,*.[ch],*.sh, :Autoformat
let g:formatdef_otbs = '"astyle --style=otbs --pad-oper --indent=force-tab"'
let g:formatters_cpp = ['otbs']
let g:formatters_c = ['otbs']

"au BufWrite *.py,*.cpp,*.[ch],*.sh,*.java exec ":call FormatCode()"
"func! FormatCode()
"	exec "w"
"	if &filetype == 'c' || &filetype == 'h' || 'cpp' || &filetype == 'cc' || &filetype == 'hpp'
"		exec "!astyle --style=otbs --indent=force-tab --pad-oper --suffix=none %"
"	elseif &filetype == 'perl'
"		exec "!astyle --style=gnu --suffix=none %"
"	elseif &filetype == 'py'|| &filetype == 'python'
"		exec "!autopep8 --in-place --aggressive %"
"	elseif &filetype == 'java'
"		exec "!astyle --style=java --suffix=none %"
"	elseif &filetype == 'jsp'
"		exec "!astyle --style=gnu --suffix=none %"
"	elseif &filetype == 'xml'
"		exec "!astyle --style=gnu --suffix=none %"
"	else
"		exec "!astyle --style=otbs --indent=force-tab --pad-oper --suffix=none %"
"	endif
"endfunc


"-------------------------------------------------"
" Leaderf-1.2.3
"
"  
"-------------------------------------------------"
set encoding=utf-8
let &termencoding=&encoding
"set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,latin1,gbk,gb2312
"navigate the result list just like `<C-K>` and `<C-J>`
let g:Lf_CommandMap = {'<C-K>': ['<Up>'], '<C-J>': ['<Down>']}
" Show icons, icons are shown by default
let g:Lf_ShowDevIcons = 0
" For GUI vim, the icon font can be specify like this, for example
"let g:Lf_DevIconsFont = "DroidSansMono Nerd Font Mono"
" If needs
set ambiwidth=double
" don't show the help in normal mode
let g:Lf_HideHelp = 1
let g:Lf_UseCache = 0
let g:Lf_UseVersionControlTool = 0
let g:Lf_IgnoreCurrentBufferName = 1
" popup mode
"  'fullScreen' - the LeaderF window take up the full screen
"  'top' - the LeaderF window is at the top of the screen.
"  'bottom' - the LeaderF window is at the bottom of the screen.
"  'left' - the LeaderF window is at the left of the screen.
"  'right' - the LeaderF window is at the right of the screen.
"  'popup' - the LeaderF window is a popup window or floating window.
"let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }
let g:Lf_RootMarkers = ['.git', '.hg', '.svn', '.repo', '.project', '.project2']
let g:Lf_Ctags = "/usr/bin/ctags"
" 自定义
let g:Lf_WindowHeight = 0.30
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_ShortcutF = "<leader>ff"
noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
noremap <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>





"-------------------------------------------------"
" quickfix
" F8 打开隐藏
"  
"-------------------------------------------------"
let g:quickfixname=1
function! QuickfixFunc()
	if g:quickfixname
		let g:quickfixname=0
		exec ":copen 20"
	else
		let g:quickfixname=1
		exec ":ccl"
	endif
endfunction
nnoremap <F8> <esc>:call QuickfixFunc()<cr><esc>



"-------------------------------------------------"
" taglist_4.6
"
"  
"-------------------------------------------------"
let Tlist_Ctags_Cmd = '/usr/bin/ctags'   " Ctags可执行文件的路径，若无则显示no such file
let Tlist_Show_One_File = 1              " 不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow = 1            " 如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Auto_Open=0                    " 打开文件时候不自动打开Taglist窗口
let Tlist_Use_Right_Window = 1           " 在右侧窗口中显示taglist窗口
map <F4> :TlistToggle<CR>




"-------------------------------------------------"
" Gtags
" use for sp file, 但是gutentags 的 g:gutentags_gtags_options_file 不能为gtags.files
"    find drivers/dma-buf/ -type f -name "*.c" -o -name "*.h" >gtags.files
"  
"-------------------------------------------------"
let g:Gtags_OpenQuickfixWindow = 0  "默认跳转时不打开quickfix窗口

"let $GTAGSLABEL='native'
"let g:gutentags_define_advanced_commands = 1

let $GTAGSLABEL = 'native-pygments'
let $GTAGSCONF = '/usr/local/share/gtags/gtags.conf'

"" Gtags func：查看定义处
"" Gtags -r func：查看引用处
"" Gtags -s text：查看未被数据库定义的tags
"" Gtags -g pattern：搜索pattern指定的字符串
"" Gtags -gie -pattern：-e选项可以用于搜索’-‘字符，但是基础搜索，没有元字符，-i选项忽略大小写，类似于grep的选项
"" GtagsCuorsor：取决于光标位置，要是在定义处，查询其引用，要是在引用处，跳转至其定义处，否则就是Gtags -s命令
"" Gtags -P text：查询包含text的路径名,Gtags -P后接/dir/为列出叫做dir目录下文件，后接\.h$列出所有的include文件
"" Gtags -f file：列出file里的符号，Gtags -f %则列出当前文件的符号
""
"" copen：打开quick fix显示窗口
"" cclose：关闭quick fix显示窗口
"" cn：下一项
"" cp：上一项
"" cl：列出查询到的相关项
"" ccN：到列表中第N个符号处
""
nmap qq :GtagsCursor<CR>
nmap qg :Gtags <C-R>=expand("<cword>")<CR>
nmap qc :Gtags -r <C-R>=expand("<cword>")<CR><CR>
nmap qs :Gtags -s <C-R>=expand("<cword>")<CR><CR>
nmap qe :Gtags -g <C-R>=expand("<cword>")<CR><CR>
nmap qf :Gtags -f  <C-R>=expand("<cfile>")<CR><CR>





"-------------------------------------------------"
" gutentags
"
"  
"-------------------------------------------------"
let g:gutentags_project_root = ['.root', '.svn', '.git', '.project', 'GTAGS']

let g:gutentags_modules = ['gtags_cscope']



